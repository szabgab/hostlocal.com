{
    "course_format": [
        "Duration of the course is 40 academic hours. (5 days 9:00-17:00).",
        "The course includes approximately 40% hands on lab work."
    ],
    "objectives": [
        "To master the rich set of Python libraries and modules.",
        "Use Object Oriented programming techniques.",
        "Use various advanced programming techniques available in Python."
    ],
    "prerequisites": [
        "Beginner Python course",
        "Experience with the basics of Python"
    ],
    "syllabus": [
        {
            "entries": [
                "Lists",
                "List slices",
                "Tuples",
                "Dictionaries (hashes)",
                "Sets",
                "Sorting",
                "Queues",
                "Stack",
                "Collections",
                "Mutable and immutable"
            ],
            "title": "Collection types and operators"
        },
        {
            "entries": [
                "Advanced uses of built-in data types (including slices on sequences).",
                "Functional programming (lambda, map, reduce, filter, zip).",
                "Comprehensions (list, dictionary, and set)."
            ],
            "title": "Data types advanced programming techniques"
        },
        {
            "entries": [
                "Objects in Python",
                "Classes",
                "Instances",
                "Scoping issues",
                "Class methods",
                "Instance methods",
                "Properties",
                "Overloading (with and without the operator module)."
            ],
            "title": "Object Oriented Programming in Python"
        },
        {
            "entries": [
                "Iterators (including sorted and reversed, and use of itertools)",
                "Generators (including generator comprehensions and pipelines)",
                "Decorators"
            ],
            "title": "Iterators and Generators"
        },
        {
            "entries": [
                "Unit Test Framework (brief introduction) ",
                "The 'with' statement",
                "Design patterns"
            ],
            "title": "Advanced programming techniques"
        },
        {
            "entries": [
                "Optimizing Python code",
                "Parallel processing",
                "Forks to processes and threads",
                "Asynchronous programming in Python",
                "Memory usage",
                "Complexity Analyzis",
                "Profiling code to find the bottleneck",
                "Case Study: Reducing run-time from 24 hours to 5 minutes"
            ],
            "title": "Optimizations"
        },
        {
            "entries": [
                "Creating non-fatal warnings",
                "Catching exceptions",
                "Handling exceptions",
                "Throwing a new exception",
                "The final block",
                "Creating your own exception"
            ],
            "title": "Exception handling"
        },
        {
            "entries": [
                "Using .NET classes from Python",
                "Parameter passing to .NET methods"
            ],
            "title": "Integration with .NET"
        },
        {
            "entries": [
                "Distributable package in source code",
                "Distributable compiled Python libraries",
                "Stand-alone executable binaries"
            ],
            "title": "Distributing Python-based applications"
        },
        {
            "entries": [
                "NumPy (Array, Transformations)",
                "Pandas (Series, Data Frames, Panels, API)",
                "SciPy",
                "Visualization and Plotting including 3D with Matplotlib and Seaborn",
                "Comparing with Matlab and R",
                "Integrating Python with Matlab"
            ],
            "title": "The Scientific libraries"
        }
    ],
    "target_audience": [
        "This is an advanced Python course suitable for people who already have Python programming background."
    ],
    "text": [],
    "title": "Custom Advanced Python Programming 2019.10.16"
}